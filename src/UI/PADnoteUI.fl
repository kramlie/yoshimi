# data file for the Fltk User Interface Designer (fluid)
version 1.0304
header_name {.h}
code_name {.cc}
comment {PADNoteUI.h} {not_in_source in_header
}

comment {PADNoteUI.cc} {in_source not_in_header
}

comment {Original ZynAddSubFX author Nasca Octavian Paul
Copyright (C) 2002-2005 Nasca Octavian Paul
Copyright 2009-2011, Alan Calvert
Copyright 2015-2020, Will Godfrey

This file is part of yoshimi, which is free software: you can redistribute
it and/or modify it under the terms of the GNU Library General Public
License as published by the Free Software Foundation; either version 2 of
the License, or (at your option) any later version.

yoshimi is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE.   See the GNU General Public License (version 2 or
later) for more details.

You should have received a copy of the GNU General Public License along with
yoshimi; if not, write to the Free Software Foundation, Inc., 51 Franklin
Street, Fifth Floor, Boston, MA  02110-1301, USA.

This file is derivative of ZynAddSubFX original code

} {in_source in_header
}

decl {\#include <FL/Fl_Box.H>
    \#include <FL/Fl_Group.H>
    \#include <FL/Fl_File_Chooser.H>
    \#include <FL/fl_draw.H>
    \#include "Params/PADnoteParameters.h"
    \#include "UI/MiscGui.h"
    \#include "PresetsUI.h"
    \#include "UI/WidgetPDial.h"
    \#include "EnvelopeUI.h"
    \#include "LFOUI.h"
    \#include "FilterUI.h"} {private global
}

decl {\#include "UI/YoshiWin.h"} {private global
}

decl {\#include "ResonanceUI.h"
    \#include "OscilGenUI.h"} {public global
}

decl {\#include "MasterUI.h"} {private global
}

decl {\#include "Misc/SynthHelper.h"
    using synth::getDetune;} {private local
}

decl {\#include "Misc/NumericFuncs.h"
    using func::dB2rap;
    using func::rap2dB;} {private local
}

decl {\#include "Misc/TextMsgBuffer.h"

    namespace { // Implementation details...
        TextMsgBuffer& textMsgBuffer = TextMsgBuffer::instance();
    }} {private local
}

class PADnoteHarmonicProfile {: {public Fl_Box}
} {
  Function {PADnoteHarmonicProfile(int x,int y, int w, int h, const char *label=0):Fl_Box(x,y,w,h,label)} {} {
    code {pars=NULL;} {}
  }
  Function {init(PADnoteParameters *pars)} {} {
    code {this->pars=pars;} {}
  }
  Function {draw()} {} {
    code {//
        int ox = x(), oy = y(), lx =w (), ly = h() - 1;
        if (!visible()) return;
        float smps[lx];

        float realbw = pars->getprofile(smps,lx);
        bool active = active_r();

        //draw the equivalent bandwidth
        if (active)
            fl_color(220,220,220);
        else
            fl_color(160,165,165);
        float scale =  lx / 430.0f;
        fl_line_style(0, int(1 * scale));
        int rbw = (int)(realbw * (lx - 1.0) / 2.0);
        for (int i = lx / 2 - rbw; i < (lx / 2 + rbw); i++)
            fl_line(ox+i, oy, ox+i, oy + ly - 1);

        if (active)
            fl_color(200, 200, 200);
        else
            fl_color(160, 160, 160);
        for (int i = 1; i < 10; i++)
        {
            int kx = (int)(lx / 10.0 * i);
            fl_line(ox + kx, oy, ox + kx, oy + ly - 1);
        }
        for (int i = 1; i < 5; i++)
        {
            int ky = (int)(ly / 5.0 * i);
            fl_line(ox, oy + ly - ky, ox + lx, oy + ly - ky - 1);
        }

        fl_color(120, 120, 120);
        fl_line(ox + lx / 2, oy, ox + lx / 2, oy + ly);

        //draw the graph
        int step = 2 * scale;
        fl_line_style(0, step);
        
        for (int i = 0; i < lx; i += step)
        {
             int val = int((ly - 2) * smps[i]);
              if (active)
                fl_color(180, 210, 240);
            else
                fl_color(150, 150, 155);
            if (val != 0)
                fl_line(ox + i, oy + ly, ox + i, oy + ly - val);

        }
        
        int oi = 0;
        float ov = 0;
        
        for (int i = 0; i < lx; i++)
        {
            int ni = ox + i;
            float nv = (ly - 2) * smps[i];
            
            if (active)
                fl_color(0, 0, 100);
            else
                fl_color(150, 150, 150);
            if (i > 0)
                fl_line(oi, oy + ly - ov, ni, oy + ly - nv);
            oi = ni;
            ov = nv;
        }

        if (active)
            fl_color(0, 100, 220);
        else
            fl_color(150, 160, 170);
        fl_line(ox + lx / 2 - rbw, oy, ox + lx / 2 - rbw, oy + ly - 1);
        fl_line(ox + lx / 2 + rbw, oy, ox + lx / 2 + rbw, oy + ly - 1);
        fl_line_style(0, 1);} {}
  }
  decl {PADnoteParameters *pars;} {public local
  }
}

class PADnoteOvertonePosition {: {public Fl_Box}
} {
  Function {PADnoteOvertonePosition(int x,int y, int w, int h, const char *label=0):Fl_Box(x,y,w,h,label)} {} {
    code {pars=NULL;} {}
  }
  Function {init(PADnoteParameters *pars)} {} {
    code {synth = pars->getSynthEngine();
this->pars=pars;} {}
  }
  Function {draw()} {} {
    code {//
        if (!visible()) return;
        const int maxdb = 60;
        int ox = x(), oy = y(), lx = w(), ly = h();
        const int maxharmonic = 64;
        float scale = lx / 525;
        fl_line_style(0, 1 * scale);
        for (int i = 1; i < maxharmonic; i++)
        {
            fl_color(200, 200, 200);
            if (i % 10 == 0)
                fl_color(160, 160, 160);
            int kx = (int)(lx / (float)maxharmonic * i);
            fl_line(ox + kx, oy, ox + kx, oy + ly);
        }

        int n = synth->halfoscilsize;
        float spc[n];
        for (int i = 0; i < n; i++)
            spc[i] = 0.0;
        pars->oscilgen->getspectrum(n, spc, 0);

        //normalize
        float max = 0;
        for (int i = 0; i < n; i++)
        {
            float x = fabsf(spc[i]);
            if (max < x)
                max=x;
        }
        if (max < 0.000001)
            max = 1.0;
        max = max * 1.05;

        float spectrum[lx];
        for (int i = 0; i < lx; i++)
            spectrum[i] = 0;

        for (int i = 1; i < n; i++)
        {
            float nhr = pars->getNhr(i);
            int kx = (int)(lx / (float)maxharmonic * nhr);
            if (kx < 0 || kx >= lx)
                continue;
            spectrum[kx] = spc[i - 1] / max + 1e-9;
        }

        fl_color(180, 0, 0);

        if (pars->Pmode == 2)
        {
            int old = 0;
            for (int i = 1; i < lx; i++)
            {
                if ((spectrum[i] > 1e-10) || (i == (lx - 1)))
                {
                    int delta = i - old;
                    float val1 = spectrum[old];
                    float val2 = spectrum[i];
                    float idelta = 1.0 / delta;
                    for (int j = 0; j < delta; j++)
                    {
                        float x = idelta * j;
                        spectrum[old + j] = val1 * (1.0 - x) + val2 * x;
                    }
                    old = i;
                }
            }
        }
        fl_line_style(0, 2 * scale);
        for (int i = 0; i < lx; i++)
        {
            float x = spectrum[i];
            if (x > dB2rap(-maxdb))
                x = rap2dB(x) / maxdb + 1;
            else
                continue;
            int yy = (int)(x * ly);
            fl_line(ox+i,oy+ly-1-yy,ox+i,oy+ly-1);
        }
        fl_line_style(0, 1);} {}
  }
  decl {PADnoteParameters *pars;} {public local
  }
  decl {SynthEngine *synth;} {private local
  }
}

class PADnoteUI {open : {public PresetsUI_}
} {
  Function {make_window()} {open
  } {
    comment {randompan MUST be after panwidth} {in_source in_header
    }
    Fl_Window padnotewindow {
      label {PAD synth Parameters}
      callback {padClose->do_callback();} open
      xywh {523 198 580 440} type Double resizable
      code0 {o->copy_label(synth->getGuiMaster()->setPartWindowTitle("PadSynth").c_str());}
      code1 {padDW = o->w(); padDH = o->h();}
      code2 {padnotewindow->size_range(padDW, padDH, 0, 0, 0, 0, 1);} visible
    } {
      Fl_Tabs {} {
        callback {//
            if (o->value() != harmonicstructuregroup)
                applybutton->hide();
            else
                applybutton->show();} open
        xywh {0 0 580 405}
      } {
        Fl_Group harmonicstructuregroup {
          label {Harmonic Structure} open
          xywh {0 20 580 385} box ENGRAVED_FRAME labelsize 12 hide
        } {
          Fl_Group bwprofilegroup {
            xywh {5 30 90 260} box ENGRAVED_FRAME
            code0 {if (pars->Pmode!=0) o->deactivate();}
          } {
            Fl_Choice hpbasetype {
              label {Base Type}
              callback {//
              send_data(TOPLEVEL::action::forceUpdate, PADSYNTH::control::baseType, o->value(), TOPLEVEL::type::Integer);}
              xywh {15 45 75 15} down_box BORDER_BOX labelsize 10 align 5 textsize 10
              code0 {o->value(pars->Php.base.type);}
            } {
              MenuItem hbgauss {
                label Gauss
                xywh {15 15 100 20} labelfont 1 labelsize 10
              }
              MenuItem hbsquare {
                label Square
                xywh {25 25 100 20} labelfont 1 labelsize 10
              }
              MenuItem hbdouble {
                label DoubleExp
                xywh {35 35 100 20} labelfont 1 labelsize 10
              }
            }
            Fl_Dial hpbasepar1 {
              label Width
              callback {//
              send_data(TOPLEVEL::action::forceUpdate, PADSYNTH::control::baseWidth, o->value(), TOPLEVEL::type::Integer);}
              xywh {20 75 25 25} box ROUND_UP_BOX labelsize 10 align 1 maximum 127 step 1
              code0 {o->value(pars->Php.base.par1);}
              class WidgetPDial
            }
            Fl_Dial hpfreqmult {
              label FreqMlt
              callback {//
              send_data(TOPLEVEL::action::forceUpdate, PADSYNTH::control::frequencyMultiplier, o->value(), TOPLEVEL::type::Integer);}
              xywh {55 75 25 25} box ROUND_UP_BOX labelsize 10 align 1 maximum 127 step 1
              code0 {o->value(pars->Php.freqmult);}
              class WidgetPDial
            }
            Fl_Dial hpmpar1 {
              label Str
              callback {//
              send_data(TOPLEVEL::action::forceUpdate, PADSYNTH::control::modulatorStretch, o->value(), TOPLEVEL::type::Integer);}
              xywh {15 115 20 20} box ROUND_UP_BOX labelsize 10 align 1 maximum 127 step 1
              code0 {o->value(pars->Php.modulator.par1);}
              class WidgetPDial
            }
            Fl_Dial hpmfreq {
              label SFreq
              callback {//
              send_data(TOPLEVEL::action::forceUpdate, PADSYNTH::control::modulatorFrequency, o->value(), TOPLEVEL::type::Integer);}
              xywh {40 115 20 20} box ROUND_UP_BOX labelsize 10 align 1 maximum 127 step 1
              code0 {o->value(pars->Php.modulator.freq);}
              class WidgetPDial
            }
            Fl_Dial hpwidth {
              label Size
              callback {//
              send_data(TOPLEVEL::action::forceUpdate, PADSYNTH::control::size, o->value(), TOPLEVEL::type::Integer);}
              xywh {65 115 20 20} box ROUND_UP_BOX labelsize 10 align 1 maximum 127 step 1
              code0 {o->value(pars->Php.width);}
              class WidgetPDial
            }
            Fl_Choice hponehalf {
              callback {//
              send_data(TOPLEVEL::action::forceUpdate, PADSYNTH::control::harmonicSidebands, o->value(), TOPLEVEL::type::Integer);}
              xywh {10 143 80 15} down_box BORDER_BOX labelsize 10 align 5 textsize 10
              code0 {o->value(pars->Php.onehalf);}
            } {
              MenuItem hpfull {
                label Full
                xywh {25 25 100 20} labelfont 1 labelsize 10
              }
              MenuItem hpupper {
                label {Upper Half}
                xywh {45 45 100 20} labelfont 1 labelsize 10
              }
              MenuItem hplower {
                label {Lower Half}
                xywh {35 35 100 20} labelfont 1 labelsize 10
              }
            }
            Fl_Group ampgroup {
              xywh {10 160 80 105} box BORDER_BOX
            } {
              Fl_Choice hpampmode {
                label AmpMode
                callback {//
                send_data(TOPLEVEL::action::forceUpdate, PADSYNTH::control::amplitudeMode, o->value(), TOPLEVEL::type::Integer);}
                xywh {15 205 70 15} down_box BORDER_BOX labelsize 10 align 5 textsize 10
                code0 {o->value(pars->Php.amp.mode);}
              } {
                MenuItem hpasum {
                  label Sum
                  xywh {60 60 100 20} labelfont 1 labelsize 10
                }
                MenuItem hpamult {
                  label Mult
                  xywh {70 70 100 20} labelfont 1 labelsize 10
                }
                MenuItem hpadiv1 {
                  label Div1
                  xywh {80 80 100 20} labelfont 1 labelsize 10
                }
                MenuItem hpadiv2 {
                  label Div2
                  xywh {90 90 100 20} labelfont 1 labelsize 10
                }
              }
              Fl_Dial hpamppar1 {
                label Par1
                callback {//
                send_data(TOPLEVEL::action::forceUpdate, PADSYNTH::control::spectralWidth, o->value(), TOPLEVEL::type::Integer);}
                xywh {15 235 25 25} box ROUND_UP_BOX labelsize 10 align 1 maximum 127 step 1
                code0 {o->value(pars->Php.amp.par1);}
                class WidgetPDial
              }
              Fl_Dial hpamppar2 {
                label Par2
                callback {//
                send_data(TOPLEVEL::action::forceUpdate, PADSYNTH::control::spectralAmplitude, o->value(), TOPLEVEL::type::Integer);}
                xywh {55 235 25 25} box ROUND_UP_BOX labelsize 10 align 1 maximum 127 step 1
                code0 {o->value(pars->Php.amp.par2);}
                class WidgetPDial
              }
            }
            Fl_Choice hpamptype {
              label AmpMultiplier
              callback {//
                send_data(TOPLEVEL::action::forceUpdate, PADSYNTH::control::amplitudeMultiplier, o->value(), TOPLEVEL::type::Integer);}
              xywh {15 175 70 15} down_box BORDER_BOX labelsize 10 align 5 textsize 10
              code0 {o->value(pars->Php.amp.type);}
              code1 {if (_SYS_::F2B(o->value())) ampgroup->activate(); else ampgroup->deactivate();}
            } {
              MenuItem hampoff {
                label OFF
                xywh {55 55 100 20} labelfont 1 labelsize 10
              }
              MenuItem hampgauss {
                label Gauss
                xywh {65 65 100 20} labelfont 1 labelsize 10
              }
              MenuItem hampsine {
                label Sine
                xywh {75 75 100 20} labelfont 1 labelsize 10
              }
              MenuItem hampflat {
                label Flat
                xywh {85 85 100 20} labelfont 1 labelsize 10
              }
            }
            Fl_Check_Button hpautoscale {
              label Autoscale
              callback {//
              send_data(TOPLEVEL::action::forceUpdate, PADSYNTH::control::autoscale, o->value(), TOPLEVEL::type::Integer);}
              xywh {10 270 74 15} down_box DOWN_BOX labelsize 11
              code0 {o->value(pars->Php.autoscale);}
            }
          }
          Fl_Group {} {
            xywh {100 155 315 135} box THIN_DOWN_BOX color 32 selection_color 71 labelcolor 179 align 6
            code0 {osc=new Oscilloscope(o->x(),o->y(),o->w(),o->h(),"");}
            code1 {osc->init(pars->oscilgen, synth);}
          } {}
          Fl_Box cbwidget {
            label {Harmonic Content}
            callback {//
            overtonepos->redraw();
            applybutton->color(FL_RED);
            applybutton->redraw();}
            xywh {125 135 205 20} labelsize 12 align 16
          }
          Fl_Button resonance {
            label Resonance
            callback {//
            resui->resonancewindow->redraw();
            resui->Show(false);
            resui->setcbwidget(cbwidget, applybutton);
            if ((Fl::event_button() == 3))
                padnotewindow->hide();}
            xywh {425 225 85 25} box THIN_UP_BOX labelfont 1 labelsize 12
          }
          Fl_Button waveform {
            label Waveform
            callback {//
            if (oscui!=NULL)
                delete (oscui);
            lastWaveW = 0;
            oscui = new OscilEditor(pars->POscil, osc, cbwidget, applybutton, synth, npart, kititem, 2);
            if ((Fl::event_button() == 3))
                padnotewindow->hide();}
            tooltip {Right click: also close this} xywh {425 260 85 25} box THIN_UP_BOX labelfont 1 labelsize 12
          }
          Fl_Dial bwdial {
            label BandWidth
            callback {//
            send_data(TOPLEVEL::action::forceUpdate, PADSYNTH::control::bandwidth, o->value(), TOPLEVEL::type::Integer);}
            xywh {20 307 35 35} box ROUND_UP_BOX labelsize 10 align 1 maximum 1000 step 1
            code0 {o->value(pars->Pbandwidth);}
            code1 {if (pars->Pmode!=0) o->deactivate();}
            code2 {o->setValueType(VC_BandWidth);}
            class WidgetPDial
          }
          Fl_Value_Output bwcents {
            label cents
            xywh {60 320 55 15} labelsize 10 align 5 maximum 10000 textsize 11
            code0 {o->step(0.1, 1);}
            code1 {o->value(pars->setPbandwidth(pars->Pbandwidth));}
            code2 {if (pars->Pmode!=0) o->deactivate();}
          }
          Fl_Choice bwscale {
            label {Bandwidth Scale}
            callback {//
            send_data(TOPLEVEL::action::forceUpdate, PADSYNTH::control::bandwidthScale, o->value(), TOPLEVEL::type::Integer);}
            xywh {125 315 80 20} down_box BORDER_BOX labelsize 10 align 5 textsize 11
            code0 {o->value(pars->Pbwscale);}
            code1 {if (pars->Pmode!=0) o->deactivate();}
          } {
            MenuItem BSnormal {
              label Normal
              xywh {95 95 100 20} labelfont 1 labelsize 11
            }
            MenuItem BSequal {
              label EqualHz
              xywh {105 105 100 20} labelfont 1 labelsize 11
            }
            MenuItem BSquarter {
              label Quarter
              xywh {115 115 100 20} labelfont 1 labelsize 11
            }
            MenuItem BShalf {
              label Half
              xywh {125 125 100 20} labelfont 1 labelsize 11
            }
            MenuItem BS75 {
              label {75%}
              xywh {135 135 100 20} labelfont 1 labelsize 11
            }
            MenuItem BS150 {
              label {150%}
              xywh {145 145 100 20} labelfont 1 labelsize 11
            }
            MenuItem BSdouble {
              label Double
              xywh {145 145 100 20} labelfont 1 labelsize 11
            }
            MenuItem BSinvhalf {
              label {Inv.Half}
              xywh {155 155 100 20} labelfont 1 labelsize 11
            }
          }
          Fl_Choice spectrummode {
            label {Spectrum Mode}
            callback {//
            send_data(TOPLEVEL::action::forceUpdate, PADSYNTH::control::spectrumMode, o->value(), TOPLEVEL::type::Integer);}
            xywh {265 315 90 20} down_box BORDER_BOX labelsize 10 align 5 textsize 11
            code0 {o->value(pars->Pmode);}
          } {
            MenuItem SPband {
              label Bandwidth
              xywh {105 105 100 20} labelfont 1 labelsize 11
            }
            MenuItem SPdesc {
              label Discrete
              xywh {125 125 100 20} labelfont 1 labelsize 11
            }
            MenuItem SPcont {
              label Continuous
              xywh {115 115 100 20} labelfont 1 labelsize 11
            }
          }
          Fl_Group hrgroup {
            xywh {360 296 215 50} box ENGRAVED_FRAME
          } {
            Fl_Dial hrpospar1 {
              label Par1
              callback {//
              send_data(TOPLEVEL::action::forceUpdate, PADSYNTH::control::overtoneParameter1, o->value(), TOPLEVEL::type::Integer);}
              xywh {470 315 25 25} box ROUND_UP_BOX labelsize 10 align 1 maximum 255 step 1
              code0 {o->value(pars->Phrpos.par1);}
              class WidgetPDial
            }
            Fl_Dial hrpospar2 {
              label Par2
              callback {//
              send_data(TOPLEVEL::action::forceUpdate, PADSYNTH::control::overtoneParameter2, o->value(), TOPLEVEL::type::Integer);}
              xywh {505 315 25 25} box ROUND_UP_BOX labelsize 10 align 1 maximum 255 step 1
              code0 {o->value(pars->Phrpos.par2);}
              class WidgetPDial
            }
            Fl_Dial hrpospar3 {
              label ForceH
              callback {//
              send_data(TOPLEVEL::action::forceUpdate, PADSYNTH::control::overtoneForceHarmonics, o->value(), TOPLEVEL::type::Integer);}
              xywh {540 315 25 25} box ROUND_UP_BOX labelsize 10 align 1 maximum 255 step 1
              code0 {o->value(pars->Phrpos.par3);}
              code1 {o->setValueType(VC_percent255);}
              class WidgetPDial
            }
          }
          Fl_Choice hrpostype {
            label OvertonesPosition
            callback {//
                  send_data(TOPLEVEL::action::forceUpdate, PADSYNTH::control::overtonePosition, o->value(), TOPLEVEL::type::Integer);}
            xywh {370 315 85 20} down_box BORDER_BOX labelsize 10 align 5 textsize 11
            code0 {o->value(pars->Phrpos.type);}
            code1 {if (_SYS_::F2B(o->value())) hrgroup->activate(); else hrgroup->deactivate();}
          } {
            MenuItem HRharmonic {
              label Harmonic
              xywh {80 80 100 20} labelfont 1 labelsize 11
            }
            MenuItem HRshiftu {
              label ShiftU
              xywh {90 90 100 20} labelfont 1 labelsize 11
            }
            MenuItem HRshiftl {
              label ShiftL
              xywh {100 100 100 20} labelfont 1 labelsize 11
            }
            MenuItem HRpoweru {
              label PowerU
              xywh {100 100 100 20} labelfont 1 labelsize 11
            }
            MenuItem HRpowerl {
              label PowerL
              xywh {110 110 100 20} labelfont 1 labelsize 11
            }
            MenuItem HRsine {
              label Sine
              xywh {120 120 100 20} labelfont 1 labelsize 11
            }
            MenuItem HRpower {
              label Power
              xywh {130 130 100 20} labelfont 1 labelsize 11
            }
            MenuItem HRshift {
              label Shift
              xywh {140 140 100 20} labelfont 1 labelsize 11
            }
          }
          Fl_Group overtonepos {
            xywh {5 350 570 45} box FLAT_BOX color 54 selection_color 218 labelcolor 63
            code0 {PADnoteOvertonePosition *opui=new PADnoteOvertonePosition(o->x(),o->y(),o->w(),o->h(),"");}
            code1 {opui->init(pars);}
          } {}
          Fl_Choice qbasenote {
            label base
            callback {//
            send_data(TOPLEVEL::action::forceUpdate, PADSYNTH::control::harmonicBase, o->value(), TOPLEVEL::type::Integer);}
            xywh {425 155 50 20} down_box BORDER_BOX labelsize 11 align 5 textsize 11
            code0 {o->value(pars->Pquality.basenote);}
          } {
            MenuItem QBc2 {
              label {C-2}
              xywh {10 10 100 20} labelfont 1 labelsize 12
            }
            MenuItem QBg2 {
              label {G-2}
              xywh {20 20 100 20} labelfont 1 labelsize 12
            }
            MenuItem QBc3 {
              label {C-3}
              xywh {20 20 100 20} labelfont 1 labelsize 12
            }
            MenuItem QBg3 {
              label {G-3}
              xywh {30 30 100 20} labelfont 1 labelsize 12
            }
            MenuItem QBc4 {
              label {C-4}
              xywh {30 30 100 20} labelfont 1 labelsize 12
            }
            MenuItem QBg4 {
              label {G-4}
              xywh {40 40 100 20} labelfont 1 labelsize 12
            }
            MenuItem QBc5 {
              label {C-5}
              xywh {40 40 100 20} labelfont 1 labelsize 12
            }
            MenuItem QBg5 {
              label {G-5}
              xywh {50 50 100 20} labelfont 1 labelsize 12
            }
            MenuItem QBg6 {
              label {G-6}
              xywh {60 60 100 20} labelfont 1 labelsize 12
            }
          }
          Fl_Choice qsmpoct {
            label {smp/oct}
            callback {//
            send_data(TOPLEVEL::action::forceUpdate, PADSYNTH::control::samplesPerOctave, o->value(), TOPLEVEL::type::Integer);}
            xywh {480 155 45 20} down_box BORDER_BOX labelsize 11 align 5 textsize 11
            code0 {o->value(pars->Pquality.smpoct);}
          } {
            MenuItem QShalf {
              label {0.5}
              xywh {10 10 100 20} labelfont 1 labelsize 12
            }
            MenuItem QSone {
              label 1
              xywh {0 0 100 20} labelfont 1 labelsize 12
            }
            MenuItem QStwo {
              label 2
              xywh {10 10 100 20} labelfont 1 labelsize 12
            }
            MenuItem QSthree {
              label 3
              xywh {20 20 100 20} labelfont 1 labelsize 12
            }
            MenuItem QSfour {
              label 4
              xywh {30 30 100 20} labelfont 1 labelsize 12
            }
            MenuItem QSsix {
              label 6
              xywh {40 40 100 20} labelfont 1 labelsize 12
            }
            MenuItem QS12 {
              label 12
              xywh {50 50 100 20} labelfont 1 labelsize 12
            }
          }
          Fl_Choice qoct {
            label {no.oct}
            callback {//
            send_data(TOPLEVEL::action::forceUpdate, PADSYNTH::control::numberOfOctaves, o->value(), TOPLEVEL::type::Integer);}
            xywh {530 155 45 20} down_box BORDER_BOX labelsize 11 align 5 textsize 11
            code0 {o->value(pars->Pquality.oct);}
          } {
            MenuItem QO1 {
              label 1
              xywh {10 10 100 20} labelfont 1 labelsize 12
            }
            MenuItem QO2 {
              label 2
              xywh {20 20 100 20} labelfont 1 labelsize 12
            }
            MenuItem QO3 {
              label 3
              xywh {30 30 100 20} labelfont 1 labelsize 12
            }
            MenuItem QO4 {
              label 4
              xywh {40 40 100 20} labelfont 1 labelsize 12
            }
            MenuItem QO5 {
              label 5
              xywh {50 50 100 20} labelfont 1 labelsize 12
            }
            MenuItem QO6 {
              label 6
              xywh {60 60 100 20} labelfont 1 labelsize 12
            }
            MenuItem QO7 {
              label 7
              xywh {70 70 100 20} labelfont 1 labelsize 12
            }
            MenuItem QO8 {
              label 8
              xywh {80 80 100 20} labelfont 1 labelsize 12
            }
          }
          Fl_Choice qsamplesize {
            label {Sample Size}
            callback {//
            send_data(TOPLEVEL::action::forceUpdate, PADSYNTH::control::sampleSize, o->value(), TOPLEVEL::type::Integer);}
            xywh {425 195 125 25} down_box BORDER_BOX labelsize 10 align 5 textsize 11
            code0 {o->value(pars->Pquality.samplesize);}
          } {
            MenuItem Q16 {
              label {16k (Tiny)}
              xywh {155 155 100 20} labelfont 1 labelsize 11
            }
            MenuItem Q32 {
              label 32k
              xywh {165 165 100 20} labelfont 1 labelsize 11
            }
            MenuItem Q64 {
              label {64k (Small)}
              xywh {175 175 100 20} labelfont 1 labelsize 11
            }
            MenuItem Q128 {
              label 128k
              xywh {185 185 100 20} labelfont 1 labelsize 11
            }
            MenuItem Q256 {
              label {256k (Normal)}
              xywh {205 205 100 20} labelfont 1 labelsize 11
            }
            MenuItem Q512 {
              label 512k
              xywh {200 200 100 20} labelfont 1 labelsize 11
            }
            MenuItem Q1m {
              label {1M (Big)}
              xywh {205 205 100 20} labelfont 1 labelsize 11
            }
          }
          Fl_Group hprofile {
            xywh {100 45 475 90} box FLAT_BOX color 54 selection_color 218 labelcolor 63
            code0 {PADnoteHarmonicProfile *hpui=new PADnoteHarmonicProfile(o->x(),o->y(),o->w(),o->h(),"");}
            code1 {hpui->init(pars);}
            code2 {if (pars->Pmode!=0) { o->deactivate(); o->color(48);};}
          } {}
          Fl_Box harmonicprofile {
            label {Profile of One Harmonic (Frequency Distribution)}
            xywh {160 25 315 20} labelsize 12
          }
        }
        Fl_Group envelopes {
          label {Envelopes and &LFOs} open
          xywh {0 20 580 385} box ENGRAVED_BOX labelsize 12
        } {
          Fl_Box {} {selected
            xywh {9 27 275 68} box PLASTIC_THIN_UP_BOX color 223
          }
          Fl_Group ampgrp {
            label AMPLITUDE open
            xywh {5 25 285 250} box THIN_UP_FRAME labelfont 1 labelsize 11 align 17
          } {
            Fl_Dial volume {
              label Volume
              callback {//
              send_data(0, PADSYNTH::control::volume, o->value(), TOPLEVEL::type::Integer);}
              tooltip Volume xywh {30 42 34 34} box ROUND_UP_BOX labelsize 10 maximum 127 step 1
              code0 {o->setValueType(VC_InstrumentVolume);}
              code1 {o->value(pars->PVolume);}
              class WidgetPDial
            }
            Fl_Dial vsns {
              label {Vel Sens}
              callback {//
              send_data(0, PADSYNTH::control::velocitySense, o->value(), TOPLEVEL::type::Integer);}
              tooltip {Velocity Sensing Function (rightmost to disable)} xywh {85 42 34 34} box ROUND_UP_BOX labelsize 10 maximum 127 step 1
              code0 {o->value(pars->PAmpVelocityScaleFunction);}
              code1 {o->setValueType(VC_AmpVelocitySense);}
              class WidgetPDial
            }
            Fl_Dial pan {
              label Pan
              callback {//
              send_data(TOPLEVEL::action::forceUpdate, PADSYNTH::control::panning, o->value(), TOPLEVEL::type::Integer);}
              tooltip Panning xywh {155 42 34 34} box ROUND_UP_BOX labelsize 10 maximum 127 step 1
              code0 {o->setValueType(VC_PanningStd);}
              code1 {o->value(pars->PPanning);}
              class WidgetPDial
            }
            Fl_Dial panwidth {
              label Width
              callback {//
    send_data(0, PADSYNTH::control::randomWidth, o->value(), TOPLEVEL::type::Integer);}
              tooltip {Random width} xywh {235 42 35 35} box ROUND_UP_BOX labelsize 10 maximum 63 step 1 value 63
              code0 {o->setValueType(VC_PanningRandom);}
              code1 {o->value(pars->PWidth);}
              class WidgetPDial
            }
            Fl_Check_Button randompan {
              label Rand
              callback {//
        int tmp = o->value();
        if (tmp == 0)
            panwidth->deactivate();
        else
            panwidth->activate();
        send_data(0, PADSYNTH::control::enableRandomPan, tmp, TOPLEVEL::type::Integer);}
              tooltip {Enable random panning} xywh {205 51 15 15} down_box DOWN_BOX color 48 labelsize 11 align 1
              code0 {o->value(pars->PRandom);}
              code1 {if (o->value() == 0) panwidth->deactivate(); else panwidth->activate();}
            }
            Fl_Check_Button stereo {
              label { Stereo}
              callback {//
              pars->PStereo =(o->value()) ? true : false; hprofile->redraw();
              send_data(0, PADSYNTH::control::stereo, o->value(), TOPLEVEL::type::Integer);}
              xywh {15 249 61 15} box THIN_UP_BOX down_box DOWN_BOX color 237 labelsize 11
              code0 {o->value(pars->PStereo);}
            }
            Fl_Dial dpop {
              label {D.Pop}
              callback {//
              send_data(0, PADSYNTH::control::dePop, o->value(), TOPLEVEL::type::Integer);}
              tooltip {Pop Suppression} xywh {130 247 25 25} box ROUND_UP_BOX labelsize 10 align 1 maximum 127 step 1
              code0 {o->value(pars->Fadein_adjustment);}
              class WidgetPDial
            }
            Fl_Dial pstr {
              label {P.Str.}
              callback {//
              send_data(0, PADSYNTH::control::punchStrength, o->value(), TOPLEVEL::type::Integer);}
              tooltip {Punch Strength} xywh {170 247 25 25} box ROUND_UP_BOX labelsize 10 align 1 maximum 127 step 1
              code0 {o->value(pars->PPunchStrength);}
              class WidgetPDial
            }
            Fl_Dial pt {
              label {P.t.}
              callback {//
              send_data(0, PADSYNTH::control::punchDuration, o->value(), TOPLEVEL::type::Integer);}
              tooltip {Punch Time (duration)} xywh {200 247 25 25} box ROUND_UP_BOX labelsize 10 align 1 maximum 127 step 1
              code0 {o->value(pars->PPunchTime);}
              class WidgetPDial
            }
            Fl_Dial pstc {
              label {P.Stc.}
              callback {//
              send_data(0, PADSYNTH::control::punchStretch, o->value(), TOPLEVEL::type::Integer);}
              tooltip {Punch Stretch} xywh {230 247 25 25} box ROUND_UP_BOX labelsize 10 align 1 maximum 127 step 1
              code0 {o->value(pars->PPunchStretch);}
              class WidgetPDial
            }
            Fl_Dial pvel {
              label {P.Vel.}
              callback {//
              send_data(0, PADSYNTH::control::punchVelocity, o->value(), TOPLEVEL::type::Integer);}
              tooltip {Punch Velocity Sensing} xywh {260 247 25 25} box ROUND_UP_BOX labelsize 10 align 1 maximum 127 step 1
              code0 {o->value(pars->PPunchVelocitySensing);}
              class WidgetPDial
            }
            Fl_Group ampenv {
              label {PADSynth - Amplitude Envelope} open
              xywh {10 95 250 70} box FLAT_BOX color 51 labelsize 12 align 144
              code0 {o->init(pars->AmpEnvelope, npart, kititem, 2, 0);}
              class EnvelopeUI
            } {}
            Fl_Group amplfo {
              label {Amplitude LFO     } open
              xywh {10 165 275 70} box FLAT_BOX color 47 labelfont 1 labelsize 12 align 144
              code0 {o->init(pars->AmpLfo, npart, kititem, 2, 0);}
              class LFOUI
            } {}
            Fl_Box {} {
              xywh {135 41 4 47} box THIN_DOWN_FRAME
            }
          }
          Fl_Group filtergrp {
            label FILTER open
            xywh {290 25 285 250} box THIN_UP_BOX labelfont 1 labelsize 11 align 17
          } {
            Fl_Group filterenv {
              label {PADSynth - Filter Envelope}
              xywh {295 130 275 70} box FLAT_BOX color 51 labelsize 12 align 144
              code0 {o->init(pars->FilterEnvelope, npart, kititem, 2, 2);}
              class EnvelopeUI
            } {}
            Fl_Group filterlfo {
              label {Filter LFO     }
              xywh {295 200 275 70} box FLAT_BOX color 47 labelfont 1 labelsize 12 align 144
              code0 {o->init(pars->FilterLfo, npart, kititem, 2, 2);}
              class LFOUI
            } {}
            Fl_Group filterui {
              label {PADsynth - Filter}
              xywh {295 55 275 75} box FLAT_BOX color 50 labelsize 12 align 144
              code0 {o->init(pars->GlobalFilter,&pars->PFilterVelocityScale,&pars->PFilterVelocityScaleFunction, npart, kititem, 2);}
              class FilterUI
            } {}
          }
          Fl_Group frequencygrp {
            label FREQUENCY open
            xywh {5 275 570 125} box THIN_UP_BOX labelfont 1 labelsize 11 align 17
          } {
            Fl_Group freqenv {
              label {PADSynth - Frequency Envelope}
              xywh {10 325 205 70} box FLAT_BOX color 51 labelsize 12 align 144
              code0 {o->init(pars->FreqEnvelope, npart, kititem, 2, 1);}
              class EnvelopeUI
            } {}
            Fl_Group freqlfo {
              label {Frequency LFO     }
              xywh {215 325 275 70} box FLAT_BOX color 47 labelsize 12 align 144
              code0 {o->init(pars->FreqLfo, npart, kititem, 2, 1);}
              class LFOUI
            } {}
            Fl_Dial bend {
              label Bend
              callback {//
              send_data(0, PADSYNTH::control::pitchBendAdjustment, o->value(), TOPLEVEL::type::Integer);}
              tooltip {Pitch bend range scaling} xywh {80 280 20 20} box ROUND_UP_BOX labelsize 10 align 8 maximum 127 step 1
              code0 {o->value(pars->PBendAdjust);}
              code1 {o->setValueType(VC_PitchBend);}
              class WidgetPDial
            }
            Fl_Dial offset {
              label Offset
              callback {//
              send_data(0, PADSYNTH::control::pitchBendOffset, o->value(), TOPLEVEL::type::Integer);}
              tooltip {Offset of the frequency in Hz.} xywh {140 280 20 20} box ROUND_UP_BOX labelsize 10 align 8 maximum 127 step 1
              code0 {o->value(pars->POffsetHz);}
              code1 {o->setValueType(VC_FreqOffsetHz);}
              class WidgetPDial
            }
            Fl_Check_Button hz440 {
              label 440Hz
              callback {//
              int x = (int) o->value();
              send_data(TOPLEVEL::action::forceUpdate, PADSYNTH::control::baseFrequencyAs440Hz, x, TOPLEVEL::type::Integer);}
              tooltip {set the base frequency to 440Hz} xywh {410 284 50 15} down_box DOWN_BOX labelfont 1 labelsize 10
              code0 {o->value(pars->Pfixedfreq);}
            }
            Fl_Dial fixedfreqetdial {
              label {Eq.T.}
              callback {//
              send_data(0, PADSYNTH::control::equalTemperVariation, o->value(), TOPLEVEL::type::Integer);}
              tooltip {How the frequency varies according to the keyboard (leftmost for fixed frequency)} xywh {465 280 20 20} box ROUND_UP_BOX labelsize 10 align 8 maximum 127 step 1
              code0 {o->value(pars->PfixedfreqET);}
              code1 {if (pars->Pfixedfreq==0) o->deactivate();}
              code2 {o->setValueType(VC_FixedFreqET);}
              class WidgetPDial
            }
            Fl_Slider detune {
              callback {//
              send_data(TOPLEVEL::action::forceUpdate, PADSYNTH::control::detuneFrequency, o->value(), TOPLEVEL::type::Integer);}
              tooltip {Fine Detune (cents)} xywh {57 305 433 15} type {Horz Knob} box THIN_DOWN_BOX minimum -8192 maximum 8191 step 1
              code0 {o->value(pars->PDetune-8192);}
              class mwheel_slider_rev
            }
            Fl_Value_Output detunevalueoutput {
              label Detune
              callback {o->value(getDetune(pars->PDetuneType,0,pars->PDetune));}
              xywh {12 305 45 15} labelsize 10 align 5 minimum -5000 maximum 5000 textfont 1 textsize 10
              code0 {o->step(0.01, 1);}
              code1 {o->value(getDetune(pars->PDetuneType,0,pars->PDetune));}
            }
            Fl_Counter octave {
              label Octave
              callback {//
              send_data(0, PADSYNTH::control::octave, o->value(), TOPLEVEL::type::Integer);}
              tooltip Octave xywh {510 305 45 15} type Simple color 237 selection_color 0 labelsize 10 align 1 minimum -8 maximum 7 step 1 textfont 1 textsize 11
              code0 {int k=pars->PCoarseDetune/1024;}
              code1 {if (k>=8) k-=16;}
              code2 {o->value(k);}
            }
            Fl_Choice detunetype {
              label {Detune Type}
              callback {//
              send_data(TOPLEVEL::action::forceUpdate, PADSYNTH::control::detuneType, o->value() + 1, TOPLEVEL::type::Integer);}
              xywh {495 345 75 15} down_box BORDER_BOX labelsize 10 align 5 textfont 1 textsize 10
              code1 {o->value(pars->PDetuneType - 1);}
            } {
              MenuItem padL35 {
                label L35cents
                xywh {0 0 36 21} labelfont 1 labelsize 11
              }
              MenuItem padL10 {
                label L10cents
                xywh {10 10 36 21} labelfont 1 labelsize 11
              }
              MenuItem padE100 {
                label E100cents
                xywh {20 20 36 21} labelfont 1 labelsize 11
              }
              MenuItem padE1200 {
                label E1200cents
                xywh {30 30 36 21} labelfont 1 labelsize 11
              }
            }
            Fl_Counter coarsedet {
              label {Coarse det.}
              callback {//
              send_data(0, PADSYNTH::control::coarseDetune, o->value(), TOPLEVEL::type::Integer);}
              tooltip {Coarse Detune} xywh {500 375 60 20} labelsize 10 align 5 minimum -64 maximum 63 step 1 textfont 1 textsize 11
              code0 {int k=pars->PCoarseDetune%1024;}
              code1 {if (k>=512) k-=1024;}
              code2 {o->value(k);}
              code3 {o->lstep(10);}
            }
          }
        }
      }
      Fl_Button padExport {
        label Export
        callback {//
        char *filename;
        filename=fl_file_chooser("Export samples:","(*.wav)",NULL,0);
        if (filename==NULL)
            return;
        fl_filename_setext(filename,"");
        send_data(TOPLEVEL::action::forceUpdate, MAIN::control::exportPadSynthSamples, 0, TOPLEVEL::type::Integer, npart, textMsgBuffer.push(string(filename)));}
        tooltip {Export samples as wav file} xywh {15 410 123 24} box THIN_UP_BOX labelfont 1 labelsize 12 align 128
      }
      Fl_Button applybutton {
        label {Apply Changes}
        callback {//
        send_data(TOPLEVEL::action::forceUpdate, PADSYNTH::control::applyChanges, o->value(), TOPLEVEL::type::Integer);}
        xywh {240 410 131 24} box THIN_UP_BOX labelfont 1 labelsize 12
        code0 {o->color(FL_RED);}
      }
      Fl_Button padCopy {
        label C
        callback {synth->getGuiMaster()->getPresetsUi()->copy(pars);}
        xywh {415 414 25 15} box THIN_UP_BOX color 179 labelfont 1 labelsize 11 labelcolor 7
      }
      Fl_Button padPaste {
        label P
        callback {synth->getGuiMaster()->getPresetsUi()->paste(pars,this);}
        xywh {449 414 25 15} box THIN_UP_BOX color 179 labelfont 1 labelsize 11 labelcolor 7
      }
      Fl_Button padClose {
        label Close
        callback {//
        saveWin(synth, padnotewindow->w(), padnotewindow->h(), padnotewindow->x(), padnotewindow->y(), false, "PadSynth");
        padSeen = false;
        resui->resonancewindow->hide();
        padnotewindow->hide();
        if ((Fl::event_button() == 3))
        {
            if (synth->getGuiMaster()->partui->partKitOn)
                synth->getGuiMaster()->partui->instrumentkitlist->show();
            else
                synth->getGuiMaster()->partui->instrumenteditwindow->show();
        }}
        tooltip {Right click: also reopen previous} xywh {505 410 61 24} box THIN_UP_BOX labelfont 1 labelsize 12
      }
    }
  }
  Function {Showpad()} {} {
    code {//
    int fetchW, fetchH, fetchX, fetchY, fetchO;
    loadWin(synth, fetchW, fetchH, fetchX, fetchY, fetchO, "PadSynth");
    padnotewindow->show();
    lastpadW = 0;
    padSeen = true;
    if (fetchW < padDW || fetchH < padDH)
    {
        fetchW = padDW;
        fetchH = padDH;
    }

    padnotewindow->resize(fetchX, fetchY, fetchW, fetchH);} {}
  }
  Function {padRtext()} {} {
    code {//
    if (oscui)
    {
        if(oscui->osceditUI->x() > Fl::w() - 10 || oscui->osceditUI->y() > Fl::h() - 10)
            oscui->osceditUI->position(30, 30);
        if (oscui->osceditUI->visible() && lastWaveW != oscui->osceditUI->w())
        {
            lastWaveW = oscui->osceditUI->w();
            oscui->waveRtext();
        }
    }

    ampenv->wincheck();
    freqenv->wincheck();
    filterenv->wincheck();
    if (!padnotewindow->visible())
    {
        resui->resonancewindow->hide();
        return;
    }

    if(padnotewindow->x() > Fl::w() - 10 || padnotewindow->y() > Fl::h() - 10)
        padnotewindow->position(30, 30);

    if (padnotewindow->w() == lastpadW)
        return;

    lastpadW = padnotewindow->w();

    float dScale = padnotewindow->w() / float(padDW);
    if (dScale < 0.2f)
        dScale = 0.2f;

    int size = int(10 * dScale);
    int size11 = int(11 * dScale);
    int size12 = int(12 * dScale);

    amplfo->lfoRtext(dScale);
    freqlfo->lfoRtext(dScale);
    filterlfo->lfoRtext(dScale);

    ampenv->envRtext(dScale);
    freqenv->envRtext(dScale);
    filterenv->envRtext(dScale);

    filterui->filterRtext(dScale);

    harmonicstructuregroup->labelsize(size12);
    harmonicprofile->labelsize(size12);
    hpbasetype->labelsize(size);
        hbgauss->labelsize(size);
        hbsquare->labelsize(size);
        hbdouble->labelsize(size);
    hpbasepar1->labelsize(size);
    hpfreqmult->labelsize(size);
    hpmpar1->labelsize(size);
    hpmfreq->labelsize(size);
    hpwidth->labelsize(size);
    hponehalf->labelsize(size);
        hpfull->labelsize(size);
        hpupper->labelsize(size);
        hplower->labelsize(size);

    hpampmode->labelsize(size);
        hpasum->labelsize(size);
        hpamult->labelsize(size);
        hpadiv1->labelsize(size);
        hpadiv2->labelsize(size);
    hpamppar1->labelsize(size);
    hpamppar2->labelsize(size);
    hpamptype->labelsize(size);
        hampoff->labelsize(size);
        hampgauss->labelsize(size);
        hampsine->labelsize(size);
        hampflat->labelsize(size);
    hpautoscale->labelsize(size11);

    bwdial->labelsize(size);
    bwcents->labelsize(size);
        bwcents->textsize(size11);

    bwscale->labelsize(size);
        BSnormal->labelsize(size11);
        BSequal->labelsize(size11);
        BSquarter->labelsize(size11);
        BShalf->labelsize(size11);
        BS75->labelsize(size11);
        BS150->labelsize(size11);
        BSdouble->labelsize(size11);
        BSinvhalf->labelsize(size11);

    spectrummode->labelsize(size);
        SPband->labelsize(size11);
        SPdesc->labelsize(size11);
        SPcont->labelsize(size11);

    hrpospar1->labelsize(size);
    hrpospar2->labelsize(size);
    hrpospar3->labelsize(size);
    hrpostype->labelsize(size);
        HRharmonic->labelsize(size11);
        HRshiftu->labelsize(size11);
        HRshiftl->labelsize(size11);
        HRpoweru->labelsize(size11);
        HRpowerl->labelsize(size11);
        HRsine->labelsize(size11);
        HRpower->labelsize(size11);
        HRshift->labelsize(size11);

    qbasenote->labelsize(size11);
        QBc2->labelsize(size12);
        QBg2->labelsize(size12);
        QBc3->labelsize(size12);
        QBg3->labelsize(size12);
        QBc4->labelsize(size12);
        QBg4->labelsize(size12);
        QBc5->labelsize(size12);
        QBg5->labelsize(size12);
        QBg6->labelsize(size12);
    qsmpoct->labelsize(size11);
        QShalf->labelsize(size12);
        QSone->labelsize(size12);
        QStwo->labelsize(size12);
        QSthree->labelsize(size12);
        QSfour->labelsize(size12);
        QSsix->labelsize(size12);
        QS12->labelsize(size12);
    qoct->labelsize(size11);
        QO1->labelsize(size12);
        QO2->labelsize(size12);
        QO3->labelsize(size12);
        QO4->labelsize(size12);
        QO5->labelsize(size12);
        QO6->labelsize(size12);
        QO7->labelsize(size12);
        QO8->labelsize(size12);

    qsamplesize->labelsize(size);
        Q16->labelsize(size11);
        Q32->labelsize(size11);
        Q64->labelsize(size11);
        Q128->labelsize(size11);
        Q256->labelsize(size11);
        Q512->labelsize(size11);
        Q1m->labelsize(size11);

    resonance->labelsize(size12);
    waveform->labelsize(size12);

    filtergrp->labelsize(size11);

    envelopes->labelsize(size12);
    ampgrp->labelsize(size11);
    volume->labelsize(size);
    vsns->labelsize(size);
    pan->labelsize(size);
    panwidth->labelsize(size);
    randompan->labelsize(size11);
    stereo->labelsize(size11);
    dpop->labelsize(size);
    pstr->labelsize(size);
    pt->labelsize(size);
    pstc->labelsize(size);
    pvel->labelsize(size);

    frequencygrp->labelsize(size11);
    bend->labelsize(size);
    offset->labelsize(size);
    hz440->labelsize(size);
    fixedfreqetdial->labelsize(size);
    detune->labelsize(size);
        detunevalueoutput->labelsize(size);
    octave->labelsize(size);
        octave->textsize(size11);
    detunetype->labelsize(size);
        padL35->labelsize(size11);
        padL10->labelsize(size11);
        padE100->labelsize(size11);
        padE1200->labelsize(size11);
    coarsedet->labelsize(size);
        coarsedet->textsize(size11);

    padExport->labelsize(size12);
    applybutton->labelsize(size12);
    padCopy->labelsize(size11);
    padPaste->labelsize(size11);
    padClose->labelsize(size12);

    padnotewindow->redraw();} {}
  }
  Function {send_data(int action, int control, float value, int type, int insert = UNUSED, int miscmsg = UNUSED)} {} {
    code {//
    unsigned char partnum = npart;
    if (miscmsg != UNUSED)
    {
        partnum = TOPLEVEL::section::main;
        action = TOPLEVEL::action::lowPrio;
    }
    type |= TOPLEVEL::type::Write;
    collect_data(synth, value, action, type, control, partnum, kititem, 2, insert, UNUSED, UNUSED, miscmsg);} {}
  }
  Function {returns_update(CommandBlock *getData)} {} {
    code {//
    float value = getData->data.value;
    bool value_bool = _SYS_::F2B(value);
    bool wasFromHere = ((getData->data.source & TOPLEVEL::action::noAction) == TOPLEVEL::action::fromGUI);
    unsigned char control = getData->data.control;
    unsigned char miscmsg = getData->data.miscmsg;
    float result;
    string name;

    switch(control)
    {
        case PADSYNTH::control::volume:
            volume->value(value);
            break;

        case PADSYNTH::control::velocitySense:
            vsns->value(value);
            break;

        case PADSYNTH::control::panning:
            pan->value(value);
            break;
        case PADSYNTH::control::enableRandomPan:
            randompan->value(value_bool);
            if (value_bool)
                panwidth->activate();
            else
                panwidth->deactivate();
            break;

        case PADSYNTH::control::randomWidth:
            panwidth->value(value);
            break;

        case PADSYNTH::control::bandwidth:
            bwdial->value(value);
            result = powf(value / 1000.0f, 1.1f);
            result = powf(10.0f, result * 4.0f) * 0.25f;
            bwcents->value(result);
            cbwidget->do_callback();
            break;

        case PADSYNTH::control::bandwidthScale:
            bwscale->value(lrint(value));
            cbwidget->do_callback();
            break;

        case PADSYNTH::control::spectrumMode:
            spectrummode->value(lrint(value));
            if (pars->Pmode == 0)
            {
                bwprofilegroup->activate();
                bwdial->activate();
                bwcents->activate();
                hprofile->activate();
                hprofile->color(54);
                bwscale->activate();
            }
            else
            {
                bwprofilegroup->deactivate();
                bwdial->deactivate();
                bwcents->deactivate();
                hprofile->deactivate();
                hprofile->color(48);
                bwscale->deactivate();
            }
            cbwidget->do_callback();
            break;

        case PADSYNTH::control::detuneFrequency:
            detune->value(lrint(value));
            detunevalueoutput->do_callback();
            break;

        case PADSYNTH::control::equalTemperVariation:
            fixedfreqetdial->value(lrint(value));
            break;

        case PADSYNTH::control::baseFrequencyAs440Hz:
            hz440->value(value_bool);
            if (value_bool)
                fixedfreqetdial->activate();
            else
                fixedfreqetdial->deactivate();
            break;

        case PADSYNTH::control::octave:
            octave->value(lrint(value));
            break;

        case PADSYNTH::control::detuneType:
            detunetype->value(lrint(value) - 1);
            break;

        case PADSYNTH::control::coarseDetune:
            coarsedet->value(lrint(value));
            break;

        case PADSYNTH::control::pitchBendAdjustment:
            bend->value(lrint(value));
            break;

        case PADSYNTH::control::pitchBendOffset:
            offset->value(lrint(value));
            break;

        case PADSYNTH::control::overtoneParameter1:
            hrpospar1->value(lrint(value));
            overtonepos->redraw();
            cbwidget->do_callback();
            break;

        case PADSYNTH::control::overtoneParameter2:
            hrpospar2->value(lrint(value));
            overtonepos->redraw();
            cbwidget->do_callback();
            break;

        case PADSYNTH::control::overtoneForceHarmonics:
            hrpospar3->value(lrint(value));
            overtonepos->redraw();
            cbwidget->do_callback();
            break;

        case PADSYNTH::control::overtonePosition:
            hrpostype->value(lrint(value));
            if (hrpostype->value() > 0)
                hrgroup->activate();
            else
                hrgroup->deactivate();
            overtonepos->redraw();
            cbwidget->do_callback();
            break;

        case PADSYNTH::control::baseWidth:
            hpbasepar1->value(lrint(value));
            hprofile->redraw();
            cbwidget->do_callback();
            break;

        case PADSYNTH::control::frequencyMultiplier:
            hpfreqmult->value(lrint(value));
            hprofile->redraw();
            cbwidget->do_callback();
            break;

        case PADSYNTH::control::modulatorStretch:
            hpmpar1->value(lrint(value));
            hprofile->redraw();
            cbwidget->do_callback();
            break;

        case PADSYNTH::control::modulatorFrequency:
            hpmfreq->value(lrint(value));
            hprofile->redraw();
            cbwidget->do_callback();
            break;

        case PADSYNTH::control::size:
            hpwidth->value(lrint(value));
            hprofile->redraw();
            cbwidget->do_callback();
            break;

        case PADSYNTH::control::baseType:
            hpbasetype->value(lrint(value));
            hprofile->redraw();
            cbwidget->do_callback();
            break;

        case PADSYNTH::control::harmonicSidebands:
            hponehalf->value(lrint(value));
            hprofile->redraw();
            cbwidget->do_callback();
            break;

        case PADSYNTH::control::spectralWidth:
            hpamppar1->value(value);
            hprofile->redraw();
            cbwidget->do_callback();
            break;

        case PADSYNTH::control::spectralAmplitude:
            hpamppar2->value(value);
            hprofile->redraw();
            cbwidget->do_callback();
            break;

        case PADSYNTH::control::amplitudeMultiplier:
            hpamptype->value(lrint(value));
            if (value_bool)
                ampgroup->activate();
            else
                ampgroup->deactivate();
            hprofile->redraw();
            cbwidget->do_callback();
            break;

        case PADSYNTH::control::amplitudeMode:
            hpampmode->value(lrint(value));
            hprofile->redraw();
            cbwidget->do_callback();
            break;

        case PADSYNTH::control::autoscale:
            hpautoscale->value(lrint(value));
            hprofile->redraw();
            cbwidget->do_callback();
            break;

        case PADSYNTH::control::harmonicBase:
            qbasenote->value(lrint(value));
            cbwidget->do_callback();
            break;

        case PADSYNTH::control::samplesPerOctave:
            qsmpoct->value(lrint(value));
            cbwidget->do_callback();
            break;

        case PADSYNTH::control::numberOfOctaves:
            qoct->value(lrint(value));
            cbwidget->do_callback();
            break;

        case PADSYNTH::control::sampleSize:
            qsamplesize->value(lrint(value));
            cbwidget->do_callback();
            break;

        case MAIN::control::exportPadSynthSamples:
            name = textMsgBuffer.fetch(miscmsg);
            if (name.find("FAILED") == 1)
            {
                if (wasFromHere)
                    alert(synth, "Some samples have failed.");
            }
            applybutton->color(FL_GRAY);
            applybutton->redraw();
            if (oscui)
            {
                oscui->applybutton->color(FL_GRAY);
                oscui->applybutton->redraw();
            }
            if (resui)
            {
                resui->applybutton->color(FL_GRAY);
                resui->applybutton->redraw();
            }
            break; // TODO drop-through intended?

        case PADSYNTH::control::applyChanges:
            applybutton->color(FL_GRAY);
            applybutton->redraw();
            if (oscui)
            {
                oscui->applybutton->color(FL_GRAY);
                oscui->applybutton->redraw();
            }
            if (resui)
            {
                resui->applybutton->color(FL_GRAY);
                resui->applybutton->redraw();
            }
            break;

        case PADSYNTH::control::stereo:
            stereo->value(value_bool);
            break;

        case PADSYNTH::control::dePop:
            dpop->value(value);
            break;

        case PADSYNTH::control::punchStrength:
            pstr->value(value);
            break;

        case PADSYNTH::control::punchDuration:
            pt->value(value);
            break;

        case PADSYNTH::control::punchStretch:
            pstc->value(value);
            break;

        case PADSYNTH::control::punchVelocity:
            pvel->value(value);
            break;

    }} {}
  }
  Function {PADnoteUI(PADnoteParameters *parameters, int npart_, int kititem_)} {} {
    code {//
    synth = parameters->getSynthEngine();
    pars = parameters;
    npart = npart_;
    kititem = kititem_;
    padSeen = false;
    lastWaveW = 0;
    lastpadW = 0;
    oscui = NULL;
    resui = new ResonanceUI(pars->resonance, npart, kititem, 2);
    make_window();} {}
  }
  Function {~PADnoteUI()} {return_type virtual
  } {
    code {//
    if (oscui)
        delete(oscui);
    delete(resui);
    if (padSeen)
        saveWin(synth, padnotewindow->w(), padnotewindow->h(), padnotewindow->x(), padnotewindow->y(), padSeen, "PadSynth");
    padnotewindow->hide();
    delete(padnotewindow);} {}
  }
  decl {PADnoteParameters *pars;} {public local
  }
  decl {OscilEditor *oscui;} {public local
  }
  decl {Oscilloscope *osc;} {public local
  }
  decl {ResonanceUI *resui;} {public local
  }
  decl {SynthEngine *synth;} {private local
  }
  decl {int npart;} {private local
  }
  decl {int kititem;} {private local
  }
  decl {float padDW;} {private local
  }
  decl {float padDH;} {private local
  }
  decl {int lastpadW;} {private local
  }
  decl {bool padSeen;} {private local
  }
  decl {int lastWaveW;} {private local
  }
}
